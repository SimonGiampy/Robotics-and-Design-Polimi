
#include <MD_MAX72xx.h>
#include <ESP32Servo.h>
#include <Arduino.h>
#include <WiFi.h>
#include <WiFiClient.h>

void emote_calm();
void initConnection();
void initEars();
void initEyebrows();
void initMouth();
void initNeck();
void initEyes();
void handle(String incomingData);
void network_loop(void* pvParameters);
void setMouthColor(uint8_t R, uint8_t G, uint8_t B);

// data incoming from server or for debugging via serial
String incomingData;

TaskHandle_t Task1;
TaskHandle_t Task2;

//bool has_finished = true;

//Task Functions
void main_loop(void* pvParameters);
void network_loop(void* pvParameters);

// Network details
const char* ssid_test = "test";
const char* password_test = "test1234567!";
const char* server_ip_test = "192.168.1.5";
int server_port_test = 800;

const char* ssid = "192.168.56.1";
const char* password = "test1234567!";
const char* server_ip = "192.168.1.3";
int server_port = 800;

static WiFiClient client;

unsigned char from;
char emotion;
unsigned char to;
unsigned int intensity;


typedef struct{
	int maxFrames;
	int neckBaseFrames;
	int neckBaseAngles[100];
	int neckSphereAFrames;
	int neckSphereAAngles[100];
	int neckSphereBFrames;
	int neckSphereBAngles[100];
	int leftEarFrames;
	int leftEarAngles[100];
	int rightEarFrames;
	int rightEarAngles[100];
	int leftEyebrowFrames;
	int leftEyebrowAngles[100];
	int rightEyebrowFrames;
	int rightEyebrowAngles[100];
} MovementStruct;

// --- START MOUTH ---
#define PIN_MOUTH_RED    2
#define PIN_MOUTH_GREEN  4
#define PIN_MOUTH_BLUE   12
// --- END MOUTH ---

// --- START EYES ---
#define PIN_LEFT_EYE_DATA 25
#define PIN_LEFT_EYE_CS 33
#define PIN_LEFT_EYE_CLK 32
#define PIN_RIGHT_EYE_DATA 14
#define PIN_RIGHT_EYE_CS 27
#define PIN_RIGHT_EYE_CLK 26
#define LED_MATRIX_TYPE MD_MAX72XX::FC16_HW
#define MATRIX_PER_EYE 2
#define EYES_INTENSITY 8

MD_MAX72XX leftEye = MD_MAX72XX(LED_MATRIX_TYPE, PIN_LEFT_EYE_DATA, PIN_LEFT_EYE_CLK, PIN_LEFT_EYE_CS, MATRIX_PER_EYE);
MD_MAX72XX rightEye = MD_MAX72XX(LED_MATRIX_TYPE, PIN_RIGHT_EYE_DATA, PIN_RIGHT_EYE_CLK, PIN_RIGHT_EYE_CS, MATRIX_PER_EYE);
// --- END EYES ---

// --- START NECK ---
#define PIN_NECK_BASE 21
#define PIN_NECK_SPHERE_A 22
#define PIN_NECK_SPHERE_B 23
#define NECK_BASE_START_POS 90
#define NECK_SPHERE_A_START_POS 30
#define NECK_SPHERE_B_START_POS 55

Servo neckBaseServo;
Servo neckSphereAServo;
Servo neckSphereBServo;
// --- END NECK ---

// --- START EARS ---
#define PIN_LEFT_EAR 19
#define PIN_RIGHT_EAR 18
#define LEFT_EAR_START_POS 90
#define RIGHT_EAR_START_POS 130

Servo leftEarServo;
Servo rightEarServo;
// --- END EARS ---

// --- START EYEBROWS ---
#define PIN_LEFT_EYEBROW 17
#define PIN_RIGHT_EYEBROW 16
#define LEFT_EYEBROW_START_POS 100
#define RIGHT_EYEBROW_START_POS 100

Servo leftEyebrowServo;
Servo rightEyebrowServo;
// --- END EYEBROWS ---

// --- START GLOBAL VARIABLES --
char currentEmotion = 'i';
// --- END GLOBAL VARIABLES --



void initMouth(){
	pinMode(PIN_MOUTH_RED,  OUTPUT);
	pinMode(PIN_MOUTH_GREEN,  OUTPUT);
	pinMode(PIN_MOUTH_BLUE,  OUTPUT);
	analogWrite(PIN_MOUTH_RED, 255);
	analogWrite(PIN_MOUTH_GREEN, 0);
	analogWrite(PIN_MOUTH_BLUE, 0);
}

void setMouthColor(uint8_t R, uint8_t G, uint8_t B){
	analogWrite(PIN_MOUTH_RED, R);
	analogWrite(PIN_MOUTH_GREEN, G);
	analogWrite(PIN_MOUTH_BLUE, B);
}

void initEars(){
	leftEarServo.attach(PIN_LEFT_EAR);
	rightEarServo.attach(PIN_RIGHT_EAR);
	leftEarServo.write(LEFT_EAR_START_POS);
	rightEarServo.write(RIGHT_EAR_START_POS);
}

void initEyebrows(){
    leftEyebrowServo.attach(PIN_LEFT_EYEBROW);
    rightEyebrowServo.attach(PIN_RIGHT_EYEBROW);
    leftEyebrowServo.write(LEFT_EYEBROW_START_POS);
    rightEyebrowServo.write(RIGHT_EYEBROW_START_POS);
}

void initNeck(){
    neckBaseServo.attach(PIN_NECK_BASE);
    neckSphereAServo.attach(PIN_NECK_SPHERE_A);
    neckSphereBServo.attach(PIN_NECK_SPHERE_B);
    neckBaseServo.write(NECK_BASE_START_POS);
    neckSphereAServo.write(NECK_SPHERE_A_START_POS);
    neckSphereBServo.write(NECK_SPHERE_B_START_POS);
}

void initEyes(){
    leftEye.begin();
    rightEye.begin();
    leftEye.clear();
    rightEye.clear();
    leftEye.control(MD_MAX72XX::INTENSITY, EYES_INTENSITY);
    rightEye.control(MD_MAX72XX::INTENSITY, EYES_INTENSITY);

	uint8_t eye_frame[2][16] = {{0x0, 0x0, 0x7E, 0xFF, 0xFF, 0xFF, 0xE1, 0xE1, 0xE1, 0xE1, 0xFF, 0xFF, 0xFF, 0x7E, 0x0, 0x0},{0x0, 0x0, 0x7E, 0xFF, 0xFF, 0xFF, 0xE1, 0xE1, 0xE1, 0xE1, 0xFF, 0xFF, 0xFF, 0x7E, 0x0, 0x0}};
	for(int i=0; i < 16; i++){
		rightEye.setColumn(i, eye_frame[0][i]);
		leftEye.setColumn(i, eye_frame[1][i]);
	}
}

uint8_t calm[][2][16] = {
  {{0x0, 0x0, 0x7E, 0xFF, 0xFF, 0xFF, 0xE1, 0xE1, 0xE1, 0xE1, 0xFF, 0xFF, 0xFF, 0x7E, 0x0, 0x0},{0x0, 0x0, 0x7E, 0xFF, 0xFF, 0xFF, 0xE1, 0xE1, 0xE1, 0xE1, 0xFF, 0xFF, 0xFF, 0x7E, 0x0, 0x0}},
  {{0x0, 0x0, 0x7E, 0xFF, 0xFF, 0xFF, 0xE1, 0xE1, 0xE1, 0xE1, 0xFF, 0xFF, 0xFF, 0x7E, 0x0, 0x0},{0x0, 0x0, 0x7E, 0xFF, 0xFF, 0xFF, 0xE1, 0xE1, 0xE1, 0xE1, 0xFF, 0xFF, 0xFF, 0x7E, 0x0, 0x0}},
  {{0x0, 0x0, 0x3C, 0x7E, 0x7E, 0x7E, 0x62, 0x62, 0x62, 0x62, 0x7E, 0x7E, 0x7E, 0x3C, 0x0, 0x0},{0x0, 0x0, 0x3C, 0x7E, 0x7E, 0x7E, 0x62, 0x62, 0x62, 0x62, 0x7E, 0x7E, 0x7E, 0x3C, 0x0, 0x0}},
  {{0x0, 0x0, 0x3C, 0x7E, 0x7E, 0x7E, 0x62, 0x62, 0x62, 0x62, 0x7E, 0x7E, 0x7E, 0x3C, 0x0, 0x0},{0x0, 0x0, 0x3C, 0x7E, 0x7E, 0x7E, 0x62, 0x62, 0x62, 0x62, 0x7E, 0x7E, 0x7E, 0x3C, 0x0, 0x0}},
  {{0x0, 0x0, 0x18, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x18, 0x0, 0x0},{0x0, 0x0, 0x18, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x18, 0x0, 0x0}},
  {{0x0, 0x0, 0x18, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x18, 0x0, 0x0},{0x0, 0x0, 0x18, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x18, 0x0, 0x0}},
  {{0x0, 0x0, 0x3C, 0x7E, 0x7E, 0x7E, 0x62, 0x62, 0x62, 0x62, 0x7E, 0x7E, 0x7E, 0x3C, 0x0, 0x0},{0x0, 0x0, 0x3C, 0x7E, 0x7E, 0x7E, 0x62, 0x62, 0x62, 0x62, 0x7E, 0x7E, 0x7E, 0x3C, 0x0, 0x0}},
  {{0x0, 0x0, 0x3C, 0x7E, 0x7E, 0x7E, 0x62, 0x62, 0x62, 0x62, 0x7E, 0x7E, 0x7E, 0x3C, 0x0, 0x0},{0x0, 0x0, 0x3C, 0x7E, 0x7E, 0x7E, 0x62, 0x62, 0x62, 0x62, 0x7E, 0x7E, 0x7E, 0x3C, 0x0, 0x0}},
  {{0x0, 0x0, 0x7E, 0xFF, 0xFF, 0xFF, 0xE1, 0xE1, 0xE1, 0xE1, 0xFF, 0xFF, 0xFF, 0x7E, 0x0, 0x0},{0x0, 0x0, 0x7E, 0xFF, 0xFF, 0xFF, 0xE1, 0xE1, 0xE1, 0xE1, 0xFF, 0xFF, 0xFF, 0x7E, 0x0, 0x0}},
  {{0x0, 0x0, 0x7E, 0xFF, 0xFF, 0xFF, 0xE1, 0xE1, 0xE1, 0xE1, 0xFF, 0xFF, 0xFF, 0x7E, 0x0, 0x0},{0x0, 0x0, 0x7E, 0xFF, 0xFF, 0xFF, 0xE1, 0xE1, 0xE1, 0xE1, 0xFF, 0xFF, 0xFF, 0x7E, 0x0, 0x0}},
  {{0x0, 0x0, 0x3C, 0x7E, 0x7E, 0x7E, 0x62, 0x62, 0x62, 0x62, 0x7E, 0x7E, 0x7E, 0x3C, 0x0, 0x0},{0x0, 0x0, 0x3C, 0x7E, 0x7E, 0x7E, 0x62, 0x62, 0x62, 0x62, 0x7E, 0x7E, 0x7E, 0x3C, 0x0, 0x0}},
  {{0x0, 0x0, 0x3C, 0x7E, 0x7E, 0x7E, 0x62, 0x62, 0x62, 0x62, 0x7E, 0x7E, 0x7E, 0x3C, 0x0, 0x0},{0x0, 0x0, 0x3C, 0x7E, 0x7E, 0x7E, 0x62, 0x62, 0x62, 0x62, 0x7E, 0x7E, 0x7E, 0x3C, 0x0, 0x0}},
  {{0x0, 0x0, 0x18, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x18, 0x0, 0x0},{0x0, 0x0, 0x18, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x18, 0x0, 0x0}},
  {{0x0, 0x0, 0x18, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x18, 0x0, 0x0},{0x0, 0x0, 0x18, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x18, 0x0, 0x0}},
  {{0x0, 0x0, 0x3C, 0x7E, 0x7E, 0x7E, 0x62, 0x62, 0x62, 0x62, 0x7E, 0x7E, 0x7E, 0x3C, 0x0, 0x0},{0x0, 0x0, 0x3C, 0x7E, 0x7E, 0x7E, 0x62, 0x62, 0x62, 0x62, 0x7E, 0x7E, 0x7E, 0x3C, 0x0, 0x0}},
  {{0x0, 0x0, 0x3C, 0x7E, 0x7E, 0x7E, 0x62, 0x62, 0x62, 0x62, 0x7E, 0x7E, 0x7E, 0x3C, 0x0, 0x0},{0x0, 0x0, 0x3C, 0x7E, 0x7E, 0x7E, 0x62, 0x62, 0x62, 0x62, 0x7E, 0x7E, 0x7E, 0x3C, 0x0, 0x0}},
  {{0x0, 0x0, 0x7E, 0xFF, 0xFF, 0xFF, 0xE1, 0xE1, 0xE1, 0xE1, 0xFF, 0xFF, 0xFF, 0x7E, 0x0, 0x0},{0x0, 0x0, 0x7E, 0xFF, 0xFF, 0xFF, 0xE1, 0xE1, 0xE1, 0xE1, 0xFF, 0xFF, 0xFF, 0x7E, 0x0, 0x0}},
  {{0x0, 0x0, 0x7E, 0xFF, 0xFF, 0xFF, 0xE1, 0xE1, 0xE1, 0xE1, 0xFF, 0xFF, 0xFF, 0x7E, 0x0, 0x0},{0x0, 0x0, 0x7E, 0xFF, 0xFF, 0xFF, 0xE1, 0xE1, 0xE1, 0xE1, 0xFF, 0xFF, 0xFF, 0x7E, 0x0, 0x0}},
  {{0x0, 0x0, 0x7E, 0xFF, 0xFF, 0xFF, 0xE1, 0xE1, 0xE1, 0xE1, 0xFF, 0xFF, 0xFF, 0x7E, 0x0, 0x0},{0x0, 0x0, 0x7E, 0xFF, 0xFF, 0xFF, 0xE1, 0xE1, 0xE1, 0xE1, 0xFF, 0xFF, 0xFF, 0x7E, 0x0, 0x0}},
  {{0x0, 0x0, 0x7E, 0xFF, 0xFF, 0xFF, 0xE1, 0xE1, 0xE1, 0xE1, 0xFF, 0xFF, 0xFF, 0x7E, 0x0, 0x0},{0x0, 0x0, 0x7E, 0xFF, 0xFF, 0xFF, 0xE1, 0xE1, 0xE1, 0xE1, 0xFF, 0xFF, 0xFF, 0x7E, 0x0, 0x0}},
  {{0x0, 0x0, 0x7E, 0xFF, 0xFF, 0xFF, 0xE1, 0xE1, 0xE1, 0xE1, 0xFF, 0xFF, 0xFF, 0x7E, 0x0, 0x0},{0x0, 0x0, 0x7E, 0xFF, 0xFF, 0xFF, 0xE1, 0xE1, 0xE1, 0xE1, 0xFF, 0xFF, 0xFF, 0x7E, 0x0, 0x0}},
  {{0x0, 0x0, 0x7E, 0xFF, 0xFF, 0xFF, 0xE1, 0xE1, 0xE1, 0xE1, 0xFF, 0xFF, 0xFF, 0x7E, 0x0, 0x0},{0x0, 0x0, 0x7E, 0xFF, 0xFF, 0xFF, 0xE1, 0xE1, 0xE1, 0xE1, 0xFF, 0xFF, 0xFF, 0x7E, 0x0, 0x0}},
  {{0x0, 0x0, 0x7E, 0xFF, 0xFF, 0xFF, 0xE1, 0xE1, 0xE1, 0xE1, 0xFF, 0xFF, 0xFF, 0x7E, 0x0, 0x0},{0x0, 0x0, 0x7E, 0xFF, 0xFF, 0xFF, 0xE1, 0xE1, 0xE1, 0xE1, 0xFF, 0xFF, 0xFF, 0x7E, 0x0, 0x0}},
  {{0x0, 0x0, 0x7E, 0xFF, 0xFF, 0xFF, 0xE1, 0xE1, 0xE1, 0xE1, 0xFF, 0xFF, 0xFF, 0x7E, 0x0, 0x0},{0x0, 0x0, 0x7E, 0xFF, 0xFF, 0xFF, 0xE1, 0xE1, 0xE1, 0xE1, 0xFF, 0xFF, 0xFF, 0x7E, 0x0, 0x0}},
  {{0x0, 0x0, 0x7E, 0xFF, 0xFF, 0xFF, 0xE1, 0xE1, 0xE1, 0xE1, 0xFF, 0xFF, 0xFF, 0x7E, 0x0, 0x0},{0x0, 0x0, 0x7E, 0xFF, 0xFF, 0xFF, 0xE1, 0xE1, 0xE1, 0xE1, 0xFF, 0xFF, 0xFF, 0x7E, 0x0, 0x0}},
  {{0x0, 0x0, 0x7E, 0xFF, 0xFF, 0xFF, 0xE1, 0xE1, 0xE1, 0xE1, 0xFF, 0xFF, 0xFF, 0x7E, 0x0, 0x0},{0x0, 0x0, 0x7E, 0xFF, 0xFF, 0xFF, 0xE1, 0xE1, 0xE1, 0xE1, 0xFF, 0xFF, 0xFF, 0x7E, 0x0, 0x0}},
  {{0x0, 0x0, 0x7E, 0xFF, 0xFF, 0xFF, 0xE1, 0xE1, 0xE1, 0xE1, 0xFF, 0xFF, 0xFF, 0x7E, 0x0, 0x0},{0x0, 0x0, 0x7E, 0xFF, 0xFF, 0xFF, 0xE1, 0xE1, 0xE1, 0xE1, 0xFF, 0xFF, 0xFF, 0x7E, 0x0, 0x0}},
  {{0x0, 0x0, 0x7E, 0xFF, 0xFF, 0xFF, 0xE1, 0xE1, 0xE1, 0xE1, 0xFF, 0xFF, 0xFF, 0x7E, 0x0, 0x0},{0x0, 0x0, 0x7E, 0xFF, 0xFF, 0xFF, 0xE1, 0xE1, 0xE1, 0xE1, 0xFF, 0xFF, 0xFF, 0x7E, 0x0, 0x0}},
  {{0x0, 0x0, 0x7E, 0xFF, 0xFF, 0xFF, 0xE1, 0xE1, 0xE1, 0xE1, 0xFF, 0xFF, 0xFF, 0x7E, 0x0, 0x0},{0x0, 0x0, 0x7E, 0xFF, 0xFF, 0xFF, 0xE1, 0xE1, 0xE1, 0xE1, 0xFF, 0xFF, 0xFF, 0x7E, 0x0, 0x0}},
  {{0x0, 0x0, 0x7E, 0xFF, 0xFF, 0xFF, 0xE1, 0xE1, 0xE1, 0xE1, 0xFF, 0xFF, 0xFF, 0x7E, 0x0, 0x0},{0x0, 0x0, 0x7E, 0xFF, 0xFF, 0xFF, 0xE1, 0xE1, 0xE1, 0xE1, 0xFF, 0xFF, 0xFF, 0x7E, 0x0, 0x0}},
  {{0x0, 0x0, 0x7E, 0xFF, 0xFF, 0xFF, 0xE1, 0xE1, 0xE1, 0xE1, 0xFF, 0xFF, 0xFF, 0x7E, 0x0, 0x0},{0x0, 0x0, 0x7E, 0xFF, 0xFF, 0xFF, 0xE1, 0xE1, 0xE1, 0xE1, 0xFF, 0xFF, 0xFF, 0x7E, 0x0, 0x0}},
  {{0x0, 0x0, 0x7E, 0xFF, 0xFF, 0xFF, 0xE1, 0xE1, 0xE1, 0xE1, 0xFF, 0xFF, 0xFF, 0x7E, 0x0, 0x0},{0x0, 0x0, 0x7E, 0xFF, 0xFF, 0xFF, 0xE1, 0xE1, 0xE1, 0xE1, 0xFF, 0xFF, 0xFF, 0x7E, 0x0, 0x0}},
  {{0x0, 0x0, 0x7E, 0xFF, 0xFF, 0xFF, 0xE1, 0xE1, 0xE1, 0xE1, 0xFF, 0xFF, 0xFF, 0x7E, 0x0, 0x0},{0x0, 0x0, 0x7E, 0xFF, 0xFF, 0xFF, 0xE1, 0xE1, 0xE1, 0xE1, 0xFF, 0xFF, 0xFF, 0x7E, 0x0, 0x0}},
  {{0x0, 0x0, 0x7E, 0xFF, 0xFF, 0xFF, 0xE1, 0xE1, 0xE1, 0xE1, 0xFF, 0xFF, 0xFF, 0x7E, 0x0, 0x0},{0x0, 0x0, 0x7E, 0xFF, 0xFF, 0xFF, 0xE1, 0xE1, 0xE1, 0xE1, 0xFF, 0xFF, 0xFF, 0x7E, 0x0, 0x0}},
  {{0x0, 0x0, 0x7E, 0xFF, 0xFF, 0xFF, 0xE1, 0xE1, 0xE1, 0xE1, 0xFF, 0xFF, 0xFF, 0x7E, 0x0, 0x0},{0x0, 0x0, 0x7E, 0xFF, 0xFF, 0xFF, 0xE1, 0xE1, 0xE1, 0xE1, 0xFF, 0xFF, 0xFF, 0x7E, 0x0, 0x0}},
  {{0x0, 0x0, 0x7E, 0xFF, 0xFF, 0xFF, 0xE1, 0xE1, 0xE1, 0xE1, 0xFF, 0xFF, 0xFF, 0x7E, 0x0, 0x0},{0x0, 0x0, 0x7E, 0xFF, 0xFF, 0xFF, 0xE1, 0xE1, 0xE1, 0xE1, 0xFF, 0xFF, 0xFF, 0x7E, 0x0, 0x0}},
  {{0x0, 0x0, 0x3C, 0x7E, 0x7E, 0x7E, 0x62, 0x62, 0x62, 0x62, 0x7E, 0x7E, 0x7E, 0x3C, 0x0, 0x0},{0x0, 0x0, 0x3C, 0x7E, 0x7E, 0x7E, 0x62, 0x62, 0x62, 0x62, 0x7E, 0x7E, 0x7E, 0x3C, 0x0, 0x0}},
  {{0x0, 0x0, 0x3C, 0x7E, 0x7E, 0x7E, 0x62, 0x62, 0x62, 0x62, 0x7E, 0x7E, 0x7E, 0x3C, 0x0, 0x0},{0x0, 0x0, 0x3C, 0x7E, 0x7E, 0x7E, 0x62, 0x62, 0x62, 0x62, 0x7E, 0x7E, 0x7E, 0x3C, 0x0, 0x0}},
  {{0x0, 0x0, 0x18, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x18, 0x0, 0x0},{0x0, 0x0, 0x18, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x18, 0x0, 0x0}},
  {{0x0, 0x0, 0x18, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x18, 0x0, 0x0},{0x0, 0x0, 0x18, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x18, 0x0, 0x0}},
  {{0x0, 0x0, 0x3C, 0x7E, 0x7E, 0x7E, 0x62, 0x62, 0x62, 0x62, 0x7E, 0x7E, 0x7E, 0x3C, 0x0, 0x0},{0x0, 0x0, 0x3C, 0x7E, 0x7E, 0x7E, 0x62, 0x62, 0x62, 0x62, 0x7E, 0x7E, 0x7E, 0x3C, 0x0, 0x0}},
  {{0x0, 0x0, 0x3C, 0x7E, 0x7E, 0x7E, 0x62, 0x62, 0x62, 0x62, 0x7E, 0x7E, 0x7E, 0x3C, 0x0, 0x0},{0x0, 0x0, 0x3C, 0x7E, 0x7E, 0x7E, 0x62, 0x62, 0x62, 0x62, 0x7E, 0x7E, 0x7E, 0x3C, 0x0, 0x0}},
  {{0x0, 0x0, 0x7E, 0xFF, 0xFF, 0xFF, 0xE1, 0xE1, 0xE1, 0xE1, 0xFF, 0xFF, 0xFF, 0x7E, 0x0, 0x0},{0x0, 0x0, 0x7E, 0xFF, 0xFF, 0xFF, 0xE1, 0xE1, 0xE1, 0xE1, 0xFF, 0xFF, 0xFF, 0x7E, 0x0, 0x0}},
  {{0x0, 0x0, 0x7E, 0xFF, 0xFF, 0xFF, 0xE1, 0xE1, 0xE1, 0xE1, 0xFF, 0xFF, 0xFF, 0x7E, 0x0, 0x0},{0x0, 0x0, 0x7E, 0xFF, 0xFF, 0xFF, 0xE1, 0xE1, 0xE1, 0xE1, 0xFF, 0xFF, 0xFF, 0x7E, 0x0, 0x0}},
  {{0x0, 0x0, 0x7E, 0xFF, 0xFF, 0xFF, 0xE1, 0xE1, 0xE1, 0xE1, 0xFF, 0xFF, 0xFF, 0x7E, 0x0, 0x0},{0x0, 0x0, 0x7E, 0xFF, 0xFF, 0xFF, 0xE1, 0xE1, 0xE1, 0xE1, 0xFF, 0xFF, 0xFF, 0x7E, 0x0, 0x0}},
  {{0x0, 0x0, 0x7E, 0xFF, 0xFF, 0xFF, 0xE1, 0xE1, 0xE1, 0xE1, 0xFF, 0xFF, 0xFF, 0x7E, 0x0, 0x0},{0x0, 0x0, 0x7E, 0xFF, 0xFF, 0xFF, 0xE1, 0xE1, 0xE1, 0xE1, 0xFF, 0xFF, 0xFF, 0x7E, 0x0, 0x0}},
  {{0x0, 0x0, 0x7E, 0xFF, 0xFF, 0xFF, 0xE1, 0xE1, 0xE1, 0xE1, 0xFF, 0xFF, 0xFF, 0x7E, 0x0, 0x0},{0x0, 0x0, 0x7E, 0xFF, 0xFF, 0xFF, 0xE1, 0xE1, 0xE1, 0xE1, 0xFF, 0xFF, 0xFF, 0x7E, 0x0, 0x0}},
  {{0x0, 0x0, 0x7E, 0xFF, 0xFF, 0xFF, 0xE1, 0xE1, 0xE1, 0xE1, 0xFF, 0xFF, 0xFF, 0x7E, 0x0, 0x0},{0x0, 0x0, 0x7E, 0xFF, 0xFF, 0xFF, 0xE1, 0xE1, 0xE1, 0xE1, 0xFF, 0xFF, 0xFF, 0x7E, 0x0, 0x0}},
  {{0x0, 0x0, 0x7E, 0xFF, 0xFF, 0xFF, 0xE1, 0xE1, 0xE1, 0xE1, 0xFF, 0xFF, 0xFF, 0x7E, 0x0, 0x0},{0x0, 0x0, 0x7E, 0xFF, 0xFF, 0xFF, 0xE1, 0xE1, 0xE1, 0xE1, 0xFF, 0xFF, 0xFF, 0x7E, 0x0, 0x0}},
  {{0x0, 0x0, 0x7E, 0xFF, 0xFF, 0xFF, 0xE1, 0xE1, 0xE1, 0xE1, 0xFF, 0xFF, 0xFF, 0x7E, 0x0, 0x0},{0x0, 0x0, 0x7E, 0xFF, 0xFF, 0xFF, 0xE1, 0xE1, 0xE1, 0xE1, 0xFF, 0xFF, 0xFF, 0x7E, 0x0, 0x0}},
  {{0x0, 0x0, 0x7E, 0xFF, 0xFF, 0xFF, 0xE1, 0xE1, 0xE1, 0xE1, 0xFF, 0xFF, 0xFF, 0x7E, 0x0, 0x0},{0x0, 0x0, 0x7E, 0xFF, 0xFF, 0xFF, 0xE1, 0xE1, 0xE1, 0xE1, 0xFF, 0xFF, 0xFF, 0x7E, 0x0, 0x0}},
  {{0x0, 0x0, 0x7E, 0xFF, 0xFF, 0xFF, 0xE1, 0xE1, 0xE1, 0xE1, 0xFF, 0xFF, 0xFF, 0x7E, 0x0, 0x0},{0x0, 0x0, 0x7E, 0xFF, 0xFF, 0xFF, 0xE1, 0xE1, 0xE1, 0xE1, 0xFF, 0xFF, 0xFF, 0x7E, 0x0, 0x0}},
  {{0x0, 0x0, 0x7E, 0xFF, 0xFF, 0xFF, 0xE1, 0xE1, 0xE1, 0xE1, 0xFF, 0xFF, 0xFF, 0x7E, 0x0, 0x0},{0x0, 0x0, 0x7E, 0xFF, 0xFF, 0xFF, 0xE1, 0xE1, 0xE1, 0xE1, 0xFF, 0xFF, 0xFF, 0x7E, 0x0, 0x0}},
  {{0x0, 0x0, 0x7E, 0xFF, 0xFF, 0xFF, 0xE1, 0xE1, 0xE1, 0xE1, 0xFF, 0xFF, 0xFF, 0x7E, 0x0, 0x0},{0x0, 0x0, 0x7E, 0xFF, 0xFF, 0xFF, 0xE1, 0xE1, 0xE1, 0xE1, 0xFF, 0xFF, 0xFF, 0x7E, 0x0, 0x0}},
  {{0x0, 0x0, 0x7E, 0xFF, 0xFF, 0xFF, 0xE1, 0xE1, 0xE1, 0xE1, 0xFF, 0xFF, 0xFF, 0x7E, 0x0, 0x0},{0x0, 0x0, 0x7E, 0xFF, 0xFF, 0xFF, 0xE1, 0xE1, 0xE1, 0xE1, 0xFF, 0xFF, 0xFF, 0x7E, 0x0, 0x0}},
  {{0x0, 0x0, 0x7E, 0xFF, 0xFF, 0xFF, 0xE1, 0xE1, 0xE1, 0xE1, 0xFF, 0xFF, 0xFF, 0x7E, 0x0, 0x0},{0x0, 0x0, 0x7E, 0xFF, 0xFF, 0xFF, 0xE1, 0xE1, 0xE1, 0xE1, 0xFF, 0xFF, 0xFF, 0x7E, 0x0, 0x0}},
  {{0x0, 0x0, 0x7E, 0xFF, 0xFF, 0xFF, 0xE1, 0xE1, 0xE1, 0xE1, 0xFF, 0xFF, 0xFF, 0x7E, 0x0, 0x0},{0x0, 0x0, 0x7E, 0xFF, 0xFF, 0xFF, 0xE1, 0xE1, 0xE1, 0xE1, 0xFF, 0xFF, 0xFF, 0x7E, 0x0, 0x0}},
  {{0x0, 0x0, 0x7E, 0xFF, 0xFF, 0xFF, 0xE1, 0xE1, 0xE1, 0xE1, 0xFF, 0xFF, 0xFF, 0x7E, 0x0, 0x0},{0x0, 0x0, 0x7E, 0xFF, 0xFF, 0xFF, 0xE1, 0xE1, 0xE1, 0xE1, 0xFF, 0xFF, 0xFF, 0x7E, 0x0, 0x0}}
};

MovementStruct idleMovements = {
  // maxFrames
  60,
  // neckBaseFrames
  60,
  // neckBaseAngles
  {40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120, 125, 130, 135, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 135, 130, 125, 120, 115, 110, 105, 100, 95, 90, 85, 80, 75, 70, 65, 60, 55, 50, 45},
  // neckSphereAFrames
  0,
  // neckSphereAAngles
  {},
  // neckSphereBFrames
  54,
  // neckSphereBAngles
  {55, 55, 55, 57, 59, 61, 63, 65, 67, 69, 69, 69, 67, 65, 63, 61, 59, 57, 55, 53, 51, 49, 47, 45, 43, 41, 41, 41, 41, 41, 41, 41, 41, 43, 45, 47, 49, 51, 53, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55},
  // leftEarFrames
  27,
  // leftEarAngles
  {80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 150, 150, 150, 150, 80, 80, 80, 80, 150, 150, 150, 150, 80, 80, 80, 80},
  // rightEarFrames
  27,
  // rightEarAngles
  {150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 80, 80, 80, 80, 150, 150, 150, 150, 80, 80, 80, 80, 150, 150, 150, 150},
  // leftEyebrowFrames
  0,
  // leftEyebrowAngles
  {},
  // rightEyebrowFrames
  0,
  // rightEyebrowAngles
  {}
};

void handle(String incomingData) {
	Serial.println("handling " + incomingData);

	if (incomingData.indexOf("mp3_") == 0) {
		//dFPlayer.play(incomingData.substring(4).toInt());  //Play the inserted mp3
	} else if (incomingData.indexOf("happy_") == 0) {
		
	} else if (incomingData.indexOf("angry_") == 0) {
		
	} else if (incomingData.indexOf("anxious_") == 0) {
		
	} else if (incomingData.indexOf("sad_") == 0) {
		
	} else if (incomingData.indexOf("relaxed_") == 0) {
		
	} else if (incomingData.indexOf("shocked_") == 0) {
		
	} else if (incomingData.compareTo("idle") == 0) {
	
	} else if (incomingData.compareTo("G0") == 0) {

	} else if (incomingData.compareTo("G1") == 0) {
		emote_calm();
	} else if (incomingData.compareTo("G2") == 0) {
		emote_calm();
	} else if (incomingData.compareTo("G3") == 0) { // EVA message
		emote_calm();
	} else if (incomingData.compareTo("G4") == 0) { // EVA message
		emote_calm();
	} else if (incomingData.compareTo("G5") == 0) {
		emote_calm();
	} else if (incomingData.compareTo("G6") == 0) {
		emote_calm();
	} else if (incomingData.compareTo("G7") == 0) {  //Carlotta Message
		emote_calm();
	} else if (incomingData.compareTo("G8") == 0) {  //Carlotta Messag
		emote_calm();
	} else if (incomingData.compareTo("G9") == 0) {
		emote_calm();
	} else if (incomingData.compareTo("GA") == 0) {
		emote_calm();
	} else if (incomingData.compareTo("GB") == 0) {
		emote_calm();
	} else if (incomingData.compareTo("GC") == 0) {
		emote_calm();
	} else if (incomingData.compareTo("GD") == 0) {
		emote_calm();
	} else if (incomingData.compareTo("GE") == 0) {
		emote_calm();
	} else if (incomingData.compareTo("GF") == 0) {
		//god kills any sequence
		//---------------------dPES NOT WORK----------------------
		/*vTaskDelete( Task2 );
		delay(100);
		xTaskCreatePinnedToCore(network_loop, "network", 10000, NULL, 1, &Task2, 1);*/
	} else if (incomingData.compareTo("GG") == 0) {
		//presentation finished
		//should_handle = false;
	} else if (incomingData.length() == 4) {
		/*
		has_finished = false;
		from = incomingData.substring(0, 1).toInt();
		emotion = incomingData[1];
		to = incomingData.substring(2, 3).toInt();
		intensity = incomingData.substring(3, 4).toInt();

		// the neck rotates in the direction of the robot who is making the emotion

		// reactions
		client.flush();
		*/
	}
}

void main_loop(void* pvParameters) {
	// Handle emotions
	while (true) {
		//Read from serial interface to bypass WiFi for debugging
		if (Serial.available()) {
			incomingData = Serial.readStringUntil('\n');
			Serial.println("Serial data = " + incomingData);
			handle(incomingData);
		}
		delay(10);
	}
}

void network_loop(void* pvParameters) {
  // Handle connection and receive from WiFi (updating state)
  while (true) {

	if (WiFi.status() != WL_CONNECTED) {
		initConnection();
	}

	if (client.available()) {
		incomingData = client.readString();
		Serial.println("Server says: " + incomingData);
		/*if(should_handle) {
			if(!has_finished){
			queue.enqueue(incomingData);
		} else {
			while(queue.size() > 0) {
			incomingData = queue.dequeue();
			handle(incomingData);
			}
		} 
		}*/
		handle(incomingData);
	}

	delay(10);
  }
}

void initConnection() {

	Serial.println();
	Serial.print("Connecting to ");
	Serial.println(ssid_test);

	// WiFi connection
	WiFi.begin(ssid_test, password_test);

	while (WiFi.status() != WL_CONNECTED) {
		delay(1000);
	}
	Serial.println();
	Serial.println("WiFi connected");
	Serial.println("IP address: ");
	Serial.println(WiFi.localIP());

	// Server connection
	Serial.println();
	Serial.println("Connecting to Server...");
	while (!client.connect(server_ip_test, server_port_test)) {
		delay(1000);
	}
	Serial.println("Server connected");
	Serial.println();
}

void setup() {
	Serial.begin(115200);

	initMouth();
	initEars();
	initEyebrows();
	initNeck();
	initEyes();                  
	delay(500);

	//Wifi and Server Init
	initConnection();

	//Parallel functions

	// Create a task that will be executed in the main_loop() function,
	// with name "main", stack size 10000, NULL as parameter, priority 1,
	// handled by Task1 and executed on core 0
	xTaskCreatePinnedToCore(main_loop, "main", 10000, NULL, 1, &Task1, 0);
	delay(500);

	xTaskCreatePinnedToCore(network_loop, "network", 10000, NULL, 1, &Task2, 1);
	delay(500);
}

void loop()  {

}

void emote_calm() {
	char currentAnimation = currentEmotion;
	switch(currentAnimation) {
	case 'i':
		for(int frame = 0; frame < idleMovements.maxFrames; frame++){
			neckBaseServo.write(idleMovements.neckBaseAngles[frame%idleMovements.neckBaseFrames]);
			//neckSphereAServo.write(idleMovements.neckSphereAAngles[frame%idleMovements.neckSphereAFrames]);
			neckSphereBServo.write(idleMovements.neckSphereBAngles[frame%idleMovements.neckSphereBFrames]);
			leftEarServo.write(idleMovements.leftEarAngles[frame%idleMovements.leftEarFrames]);
			rightEarServo.write(idleMovements.rightEarAngles[frame%idleMovements.rightEarFrames]);
			for(int i=0; i < 16; i++){
				rightEye.setColumn(i, calm[frame%58][0][i]);
				leftEye.setColumn(i, calm[frame%58][1][i]);
			}
			unsigned long time_now = millis();
			while (millis() < time_now + 75){
				//wait approx. 100 ms
			}
			if (currentAnimation != currentEmotion){
				break;
			}
		}
		break;
	}
}
