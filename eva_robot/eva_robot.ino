#include <MD_MAX72xx.h>
#include <ESP32Servo.h>
#include <Arduino.h>
#include <stdint.h>

typedef struct{
  int neckBaseAngles[];
  int neckSphereAAngles[];
  int neckSphereBAngles[];
  int leftEarAngles[];
  int rightEarAngles[];
  int leftEyebrowAngles[];
  int rightEyebrowAngles[];
} MovementStruct;

// --- START MOUTH ---
#define PIN_MOUTH_RED    2
#define PIN_MOUTH_GREEN  4
#define PIN_MOUTH_BLUE   12
// --- END MOUTH ---

// --- START EYES ---
#define PIN_LEFT_EYE_DATA 25
#define PIN_LEFT_EYE_CS 33
#define PIN_LEFT_EYE_CLK 32
#define PIN_RIGHT_EYE_DATA 14
#define PIN_RIGHT_EYE_CS 27
#define PIN_RIGHT_EYE_CLK 26
#define LED_MATRIX_TYPE MD_MAX72XX::FC16_HW
#define MATRIX_PER_EYE 2
#define EYES_INTENSITY 8

MD_MAX72XX leftEye = MD_MAX72XX(LED_MATRIX_TYPE, PIN_LEFT_EYE_DATA, PIN_LEFT_EYE_CLK, PIN_LEFT_EYE_CS, MATRIX_PER_EYE);
MD_MAX72XX rightEye = MD_MAX72XX(LED_MATRIX_TYPE, PIN_RIGHT_EYE_DATA, PIN_RIGHT_EYE_CLK, PIN_RIGHT_EYE_CS, MATRIX_PER_EYE);
// --- END EYES ---

// --- START NECK ---
#define PIN_NECK_BASE 21
#define PIN_NECK_SPHERE_A 22
#define PIN_NECK_SPHERE_B 23
//TODO -- check values
#define NECK_BASE_START_POS 90
#define NECK_SPHERE_A_START_POS 110
#define NECK_SPHERE_B_START_POS 55

Servo neckBaseServo;
Servo neckSphereAServo;
Servo neckSphereBServo;
// --- END NECK ---

// --- START EARS ---
#define PIN_LEFT_EAR 19
#define PIN_RIGHT_EAR 18
//TODO -- check values
#define LEFT_EAR_START_POS 90
#define RIGHT_EAR_START_POS 130

Servo leftEarServo;
Servo rightEarServo;
// --- END EARS ---

// --- START EYEBROWS ---
#define PIN_LEFT_EYEBROW 17
#define PIN_RIGHT_EYEBROW 16
//TODO -- check values
#define LEFT_EYEBROW_START_POS 100
#define RIGHT_EYEBROW_START_POS 100

Servo leftEyebrowServo;
Servo rightEyebrowServo;
// --- END EYEBROWS ---

// --- START GLOBAL VARIABLES --
TaskHandle_t Task1;
char currentEmotion = 'i';
// --- END GLOBAL VARIABLES --


void setup() {
  initMouth();
  initEars();
  initEyebrows();
  initNeck();
  initEyes();

  xTaskCreatePinnedToCore(
                    animateEyes,   /* Task function. */
                    "Animate Eyes",     /* name of task. */
                    10000,       /* Stack size of task */
                    NULL,        /* parameter of the task */
                    1,           /* priority of the task */
                    &Task1,      /* Task handle to keep track of created task */
                    0);          /* pin task to core 0 */                  
  delay(500);
}

void loop() { 
  
}

MovementStruct idle = {
  // neckBaseAngles
  {},
  // neckSphereAAngles
  {},
  // neckSphereBAngles
  {},
  // leftEarAngles
  {},
  // rightEarAngles
  {},
  // leftEyebrowAngles
  {},
  // rightEyebrowAngles
  {},
};

void initMouth(){
  pinMode(PIN_MOUTH_RED,  OUTPUT);
  pinMode(PIN_MOUTH_GREEN,  OUTPUT);
  pinMode(PIN_MOUTH_BLUE,  OUTPUT);
  analogWrite(PIN_MOUTH_RED, 255);
  analogWrite(PIN_MOUTH_GREEN, 0);
  analogWrite(PIN_MOUTH_BLUE, 0);
}

void setMouthColor(uint8_t R, uint8_t G, uint8_t B){
  analogWrite(PIN_MOUTH_RED, R);
  analogWrite(PIN_MOUTH_GREEN, G);
  analogWrite(PIN_MOUTH_BLUE, B);
}

void initEars(){
  leftEarServo.attach(PIN_LEFT_EAR);
  rightEarServo.attach(PIN_RIGHT_EAR);
  leftEarServo.write(LEFT_EAR_START_POS);
  rightEarServo.write(RIGHT_EAR_START_POS);
}

void initEyebrows(){
    leftEyebrowServo.attach(PIN_LEFT_EYEBROW);
    rightEyebrowServo.attach(PIN_RIGHT_EYEBROW);
    leftEyebrowServo.write(LEFT_EYEBROW_START_POS);
    rightEyebrowServo.write(RIGHT_EYEBROW_START_POS);
}

void initNeck(){
    neckBaseServo.attach(PIN_NECK_BASE);
    neckSphereAServo.attach(PIN_NECK_SPHERE_A);
    neckSphereBServo.attach(PIN_NECK_SPHERE_B);
    neckBaseServo.write(NECK_BASE_START_POS);
    neckSphereAServo.write(NECK_SPHERE_A_START_POS);
    neckSphereBServo.write(NECK_SPHERE_B_START_POS);
}

void initEyes(){
    leftEye.begin();
    rightEye.begin();
    leftEye.clear();
    rightEye.clear();
    leftEye.control(MD_MAX72XX::INTENSITY, EYES_INTENSITY);
    rightEye.control(MD_MAX72XX::INTENSITY, EYES_INTENSITY);
    leftEye.setColumn(0, B11111111);
    rightEye.setColumn(0, B11111111);
}

uint8_t calm[][2][16] ={
    {
        {B00000000, B00000000, B01111110, B11111111, B11111111, B11111111, B11100001, B11100001, B11100001, B11100001, B11111111, B11111111, B11111111, B01111110, B00000000, B00000000},
        {B00000000, B00000000, B01111110, B11111111, B11111111, B11111111, B11100001, B11100001, B11100001, B11100001, B11111111, B11111111, B11111111, B01111110, B00000000, B00000000}
    },
    {
        {B00000000, B00000000, B00111100, B01111110, B01111110, B01111110, B01100010, B01100010, B01100010, B01100010, B01111110, B01111110, B01111110, B00111100, B00000000, B00000000},
        {B00000000, B00000000, B00111100, B01111110, B01111110, B01111110, B01100010, B01100010, B01100010, B01100010, B01111110, B01111110, B01111110, B00111100, B00000000, B00000000}
    },
    {
        {B00000000, B00000000, B00011000, B00011100, B00011100, B00011100, B00011100, B00011100, B00011100, B00011100, B00011100, B00011100, B00011100, B00011000, B00000000, B00000000},
        {B00000000, B00000000, B00011000, B00011100, B00011100, B00011100, B00011100, B00011100, B00011100, B00011100, B00011100, B00011100, B00011100, B00011000, B00000000, B00000000}
    },
    {
        {B00000000, B00000000, B00111100, B01111110, B01111110, B01111110, B01100010, B01100010, B01100010, B01100010, B01111110, B01111110, B01111110, B00111100, B00000000, B00000000},
        {B00000000, B00000000, B00111100, B01111110, B01111110, B01111110, B01100010, B01100010, B01100010, B01100010, B01111110, B01111110, B01111110, B00111100, B00000000, B00000000}
    },
    {
        {B00000000, B00000000, B01111110, B11111111, B11111111, B11111111, B11100001, B11100001, B11100001, B11100001, B11111111, B11111111, B11111111, B01111110, B00000000, B00000000},
        {B00000000, B00000000, B01111110, B11111111, B11111111, B11111111, B11100001, B11100001, B11100001, B11100001, B11111111, B11111111, B11111111, B01111110, B00000000, B00000000}
    },
    {
        {B00000000, B00000000, B00111100, B01111110, B01111110, B01111110, B01100010, B01100010, B01100010, B01100010, B01111110, B01111110, B01111110, B00111100, B00000000, B00000000},
        {B00000000, B00000000, B00111100, B01111110, B01111110, B01111110, B01100010, B01100010, B01100010, B01100010, B01111110, B01111110, B01111110, B00111100, B00000000, B00000000}
    },
    {
        {B00000000, B00000000, B00011000, B00011100, B00011100, B00011100, B00011100, B00011100, B00011100, B00011100, B00011100, B00011100, B00011100, B00011000, B00000000, B00000000},
        {B00000000, B00000000, B00011000, B00011100, B00011100, B00011100, B00011100, B00011100, B00011100, B00011100, B00011100, B00011100, B00011100, B00011000, B00000000, B00000000}
    },
    {
        {B00000000, B00000000, B00111100, B01111110, B01111110, B01111110, B01100010, B01100010, B01100010, B01100010, B01111110, B01111110, B01111110, B00111100, B00000000, B00000000},
        {B00000000, B00000000, B00111100, B01111110, B01111110, B01111110, B01100010, B01100010, B01100010, B01100010, B01111110, B01111110, B01111110, B00111100, B00000000, B00000000}
    },
    {
        {B00000000, B00000000, B01111110, B11111111, B11111111, B11111111, B11100001, B11100001, B11100001, B11100001, B11111111, B11111111, B11111111, B01111110, B00000000, B00000000},
        {B00000000, B00000000, B01111110, B11111111, B11111111, B11111111, B11100001, B11100001, B11100001, B11100001, B11111111, B11111111, B11111111, B01111110, B00000000, B00000000}
    },
    {
        {B00000000, B00000000, B01111110, B11111111, B11111111, B11111111, B11100001, B11100001, B11100001, B11100001, B11111111, B11111111, B11111111, B01111110, B00000000, B00000000},
        {B00000000, B00000000, B01111110, B11111111, B11111111, B11111111, B11100001, B11100001, B11100001, B11100001, B11111111, B11111111, B11111111, B01111110, B00000000, B00000000}
    },
    {
        {B00000000, B00000000, B01111110, B11111111, B11111111, B11111111, B11100001, B11100001, B11100001, B11100001, B11111111, B11111111, B11111111, B01111110, B00000000, B00000000},
        {B00000000, B00000000, B01111110, B11111111, B11111111, B11111111, B11100001, B11100001, B11100001, B11100001, B11111111, B11111111, B11111111, B01111110, B00000000, B00000000}
    },
    {
        {B00000000, B00000000, B01111110, B11111111, B11111111, B11111111, B11100001, B11100001, B11100001, B11100001, B11111111, B11111111, B11111111, B01111110, B00000000, B00000000},
        {B00000000, B00000000, B01111110, B11111111, B11111111, B11111111, B11100001, B11100001, B11100001, B11100001, B11111111, B11111111, B11111111, B01111110, B00000000, B00000000}
    },
    {
        {B00000000, B00000000, B01111110, B11111111, B11111111, B11111111, B11100001, B11100001, B11100001, B11100001, B11111111, B11111111, B11111111, B01111110, B00000000, B00000000},
        {B00000000, B00000000, B01111110, B11111111, B11111111, B11111111, B11100001, B11100001, B11100001, B11100001, B11111111, B11111111, B11111111, B01111110, B00000000, B00000000}
    },
    {
        {B00000000, B00000000, B01111110, B11111111, B11111111, B11111111, B11100001, B11100001, B11100001, B11100001, B11111111, B11111111, B11111111, B01111110, B00000000, B00000000},
        {B00000000, B00000000, B01111110, B11111111, B11111111, B11111111, B11100001, B11100001, B11100001, B11100001, B11111111, B11111111, B11111111, B01111110, B00000000, B00000000}
    },
    {
        {B00000000, B00000000, B01111110, B11111111, B11111111, B11111111, B11100001, B11100001, B11100001, B11100001, B11111111, B11111111, B11111111, B01111110, B00000000, B00000000},
        {B00000000, B00000000, B01111110, B11111111, B11111111, B11111111, B11100001, B11100001, B11100001, B11100001, B11111111, B11111111, B11111111, B01111110, B00000000, B00000000}
    },
    {
        {B00000000, B00000000, B01111110, B11111111, B11111111, B11111111, B11100001, B11100001, B11100001, B11100001, B11111111, B11111111, B11111111, B01111110, B00000000, B00000000},
        {B00000000, B00000000, B01111110, B11111111, B11111111, B11111111, B11100001, B11100001, B11100001, B11100001, B11111111, B11111111, B11111111, B01111110, B00000000, B00000000}
    },
    {
        {B00000000, B00000000, B00111100, B01111110, B01111110, B01111110, B01100010, B01100010, B01100010, B01100010, B01111110, B01111110, B01111110, B00111100, B00000000, B00000000},
        {B00000000, B00000000, B00111100, B01111110, B01111110, B01111110, B01100010, B01100010, B01100010, B01100010, B01111110, B01111110, B01111110, B00111100, B00000000, B00000000}
    },
    {
        {B00000000, B00000000, B00011000, B00011100, B00011100, B00011100, B00011100, B00011100, B00011100, B00011100, B00011100, B00011100, B00011100, B00011000, B00000000, B00000000},
        {B00000000, B00000000, B00011000, B00011100, B00011100, B00011100, B00011100, B00011100, B00011100, B00011100, B00011100, B00011100, B00011100, B00011000, B00000000, B00000000}
    },
    {
        {B00000000, B00000000, B00111100, B01111110, B01111110, B01111110, B01100010, B01100010, B01100010, B01100010, B01111110, B01111110, B01111110, B00111100, B00000000, B00000000},
        {B00000000, B00000000, B00111100, B01111110, B01111110, B01111110, B01100010, B01100010, B01100010, B01100010, B01111110, B01111110, B01111110, B00111100, B00000000, B00000000}
    },
    {
        {B00000000, B00000000, B01111110, B11111111, B11111111, B11111111, B11100001, B11100001, B11100001, B11100001, B11111111, B11111111, B11111111, B01111110, B00000000, B00000000},
        {B00000000, B00000000, B01111110, B11111111, B11111111, B11111111, B11100001, B11100001, B11100001, B11100001, B11111111, B11111111, B11111111, B01111110, B00000000, B00000000}
    },
    {
        {B00000000, B00000000, B01111110, B11111111, B11111111, B11111111, B11100001, B11100001, B11100001, B11100001, B11111111, B11111111, B11111111, B01111110, B00000000, B00000000},
        {B00000000, B00000000, B01111110, B11111111, B11111111, B11111111, B11100001, B11100001, B11100001, B11100001, B11111111, B11111111, B11111111, B01111110, B00000000, B00000000}
    },
    {
        {B00000000, B00000000, B01111110, B11111111, B11111111, B11111111, B11100001, B11100001, B11100001, B11100001, B11111111, B11111111, B11111111, B01111110, B00000000, B00000000},
        {B00000000, B00000000, B01111110, B11111111, B11111111, B11111111, B11100001, B11100001, B11100001, B11100001, B11111111, B11111111, B11111111, B01111110, B00000000, B00000000}
    },
    {
        {B00000000, B00000000, B01111110, B11111111, B11111111, B11111111, B11100001, B11100001, B11100001, B11100001, B11111111, B11111111, B11111111, B01111110, B00000000, B00000000},
        {B00000000, B00000000, B01111110, B11111111, B11111111, B11111111, B11100001, B11100001, B11100001, B11100001, B11111111, B11111111, B11111111, B01111110, B00000000, B00000000}
    }
};

void animateEyes( void * pvParameters ){
  Serial.print("Task1 running on core ");
  Serial.println(xPortGetCoreID());

  char currentAnimation = currentEmotion;

  for(;;){ //creates loop
    currentAnimation = currentEmotion;
    switch(currentAnimation){
      case 'i':
        for(int f=0; f < 23; f++){
          for(int i=0; i < 16; i++){
            rightEye.setColumn(i, calm[f][0][i]);
            leftEye.setColumn(i, calm[f][1][i]);
          }
          unsigned long time_now = millis();
          while(millis() < time_now + 100){
              //wait approx. 100 ms
          }
          if(currentAnimation != currentEmotion){
              break;
          }
        }
    }
  } 
}